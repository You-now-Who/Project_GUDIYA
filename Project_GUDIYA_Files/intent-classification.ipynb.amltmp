{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.tokenize import word_tokenize\n",
        "from nltk.stem.lancaster import LancasterStemmer\n",
        "import nltk\n",
        "import re\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "import matplotlib.pyplot as plt\n",
        "from tensorflow.keras.preprocessing.text import Tokenizer\n",
        "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from tensorflow.keras.models import Sequential, load_model\n",
        "from tensorflow.keras.layers import Dense, LSTM, Bidirectional, Embedding, Dropout\n",
        "from tensorflow.keras.callbacks import ModelCheckpoint\n"
      ],
      "outputs": [],
      "execution_count": 4,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:19:17.555959Z",
          "iopub.status.busy": "2021-08-04T06:19:17.555566Z",
          "iopub.status.idle": "2021-08-04T06:19:17.562433Z",
          "shell.execute_reply": "2021-08-04T06:19:17.561385Z",
          "shell.execute_reply.started": "2021-08-04T06:19:17.555924Z"
        },
        "id": "a_WypuUXi92e",
        "trusted": true,
        "gather": {
          "logged": 1672420360549
        }
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def load_dataset(filename):\n",
        "  df = pd.read_csv(filename, encoding = \"latin1\", names = [\"Sentence\", \"Intent\"])\n",
        "  print(df.head())\n",
        "  intent = df[\"Intent\"]\n",
        "  unique_intent = list(set(intent))\n",
        "  sentences = list(df[\"Sentence\"])\n",
        "  \n",
        "  return (intent, unique_intent, sentences)\n",
        "  \n"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:19:17.564964Z",
          "iopub.status.busy": "2021-08-04T06:19:17.564507Z",
          "iopub.status.idle": "2021-08-04T06:19:17.574045Z",
          "shell.execute_reply": "2021-08-04T06:19:17.573099Z",
          "shell.execute_reply.started": "2021-08-04T06:19:17.564922Z"
        },
        "id": "LE6wywJrN2ih",
        "trusted": true
      }
    },
    {
      "cell_type": "code",
      "source": [
        "intent, unique_intent, sentences = load_dataset(\"../input/jarvisintent/Dataset-train.csv\")"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:19:17.576589Z",
          "iopub.status.busy": "2021-08-04T06:19:17.576106Z",
          "iopub.status.idle": "2021-08-04T06:19:17.598427Z",
          "shell.execute_reply": "2021-08-04T06:19:17.597551Z",
          "shell.execute_reply.started": "2021-08-04T06:19:17.576548Z"
        },
        "id": "tF0FQA7gjOCX",
        "outputId": "ab2a7e0d-4350-4c0b-db22-f8076d35be40",
        "trusted": true
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(sentences[:5])"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:19:17.909177Z",
          "iopub.status.busy": "2021-08-04T06:19:17.908789Z",
          "iopub.status.idle": "2021-08-04T06:19:17.914269Z",
          "shell.execute_reply": "2021-08-04T06:19:17.913271Z",
          "shell.execute_reply.started": "2021-08-04T06:19:17.909127Z"
        },
        "id": "O8LLUZlokg0S",
        "outputId": "b6d4f953-4736-4a74-8e6d-037f76c3b000",
        "trusted": true
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "nltk.download(\"stopwords\")\n",
        "nltk.download(\"punkt\")"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:19:17.916819Z",
          "iopub.status.busy": "2021-08-04T06:19:17.916149Z",
          "iopub.status.idle": "2021-08-04T06:19:17.92808Z",
          "shell.execute_reply": "2021-08-04T06:19:17.926988Z",
          "shell.execute_reply.started": "2021-08-04T06:19:17.91678Z"
        },
        "id": "MhrziINPGHbW",
        "outputId": "1ff8027f-b579-4c9c-8513-fec1cf05b00f",
        "trusted": true
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#define stemmer\n",
        "stemmer = LancasterStemmer()"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:19:17.930947Z",
          "iopub.status.busy": "2021-08-04T06:19:17.930357Z",
          "iopub.status.idle": "2021-08-04T06:19:17.935084Z",
          "shell.execute_reply": "2021-08-04T06:19:17.933868Z",
          "shell.execute_reply.started": "2021-08-04T06:19:17.93091Z"
        },
        "id": "OmNLu2YSXePb",
        "trusted": true
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def cleaning(sentences):\n",
        "  words = []\n",
        "  for s in sentences:\n",
        "    clean = re.sub(r'[^ a-z A-Z 0-9]', \" \", s)\n",
        "    w = word_tokenize(clean)\n",
        "    #stemming\n",
        "    words.append([i.lower() for i in w])\n",
        "    \n",
        "  return words  "
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:19:17.937738Z",
          "iopub.status.busy": "2021-08-04T06:19:17.936885Z",
          "iopub.status.idle": "2021-08-04T06:19:17.947647Z",
          "shell.execute_reply": "2021-08-04T06:19:17.946818Z",
          "shell.execute_reply.started": "2021-08-04T06:19:17.937681Z"
        },
        "id": "j-7q3iG5PKYI",
        "trusted": true
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cleaned_words = cleaning(sentences)\n",
        "print(len(cleaned_words))\n",
        "print(cleaned_words[:2])  \n",
        "  \n"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:19:18.234836Z",
          "iopub.status.busy": "2021-08-04T06:19:18.2345Z",
          "iopub.status.idle": "2021-08-04T06:19:18.763215Z",
          "shell.execute_reply": "2021-08-04T06:19:18.762155Z",
          "shell.execute_reply.started": "2021-08-04T06:19:18.234803Z"
        },
        "id": "p1j2GJgDG6qj",
        "outputId": "96de5c50-88f5-492f-a114-ef661eff5423",
        "trusted": true
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def create_tokenizer(words, filters = '!\"#$%&()*+,-./:;<=>?@[\\]^_`{|}~'):\n",
        "  token = Tokenizer(filters = filters)\n",
        "  token.fit_on_texts(words)\n",
        "  return token"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:19:18.765323Z",
          "iopub.status.busy": "2021-08-04T06:19:18.764975Z",
          "iopub.status.idle": "2021-08-04T06:19:18.770092Z",
          "shell.execute_reply": "2021-08-04T06:19:18.769055Z",
          "shell.execute_reply.started": "2021-08-04T06:19:18.765285Z"
        },
        "id": "SJCQ_YhBJW7t",
        "trusted": true
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def max_length(words):\n",
        "  return(len(max(words, key = len)))\n",
        "  "
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:19:18.7725Z",
          "iopub.status.busy": "2021-08-04T06:19:18.772125Z",
          "iopub.status.idle": "2021-08-04T06:19:18.780975Z",
          "shell.execute_reply": "2021-08-04T06:19:18.780118Z",
          "shell.execute_reply.started": "2021-08-04T06:19:18.772461Z"
        },
        "id": "QJhdIJC5Q3Q6",
        "trusted": true
      }
    },
    {
      "cell_type": "code",
      "source": [
        "word_tokenizer = create_tokenizer(cleaned_words)\n",
        "vocab_size = len(word_tokenizer.word_index) + 1\n",
        "max_length = max_length(cleaned_words)\n",
        "\n",
        "print(\"Vocab Size = %d and Maximum length = %d\" % (vocab_size, max_length))"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:19:18.783123Z",
          "iopub.status.busy": "2021-08-04T06:19:18.782731Z",
          "iopub.status.idle": "2021-08-04T06:19:18.823192Z",
          "shell.execute_reply": "2021-08-04T06:19:18.822164Z",
          "shell.execute_reply.started": "2021-08-04T06:19:18.783074Z"
        },
        "id": "JWjxPGsZZJNX",
        "outputId": "8362e977-2660-4a5a-b823-b01e828c1175",
        "trusted": true
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def encoding_doc(token, words):\n",
        "  return(token.texts_to_sequences(words))"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:19:18.824974Z",
          "iopub.status.busy": "2021-08-04T06:19:18.824573Z",
          "iopub.status.idle": "2021-08-04T06:19:18.830277Z",
          "shell.execute_reply": "2021-08-04T06:19:18.829021Z",
          "shell.execute_reply.started": "2021-08-04T06:19:18.82493Z"
        },
        "id": "D0TXu2xsR8jq",
        "trusted": true
      }
    },
    {
      "cell_type": "code",
      "source": [
        "encoded_doc = encoding_doc(word_tokenizer, cleaned_words)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:19:18.832426Z",
          "iopub.status.busy": "2021-08-04T06:19:18.831955Z",
          "iopub.status.idle": "2021-08-04T06:19:18.857907Z",
          "shell.execute_reply": "2021-08-04T06:19:18.857015Z",
          "shell.execute_reply.started": "2021-08-04T06:19:18.83232Z"
        },
        "id": "dE92Hk1Va--H",
        "trusted": true
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def padding_doc(encoded_doc, max_length):\n",
        "  return(pad_sequences(encoded_doc, maxlen = max_length, padding = \"post\"))"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:19:18.860276Z",
          "iopub.status.busy": "2021-08-04T06:19:18.859612Z",
          "iopub.status.idle": "2021-08-04T06:19:18.867894Z",
          "shell.execute_reply": "2021-08-04T06:19:18.866963Z",
          "shell.execute_reply.started": "2021-08-04T06:19:18.860215Z"
        },
        "id": "fyOzLEboc4LZ",
        "trusted": true
      }
    },
    {
      "cell_type": "code",
      "source": [
        "padded_doc = padding_doc(encoded_doc, max_length)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:19:18.871549Z",
          "iopub.status.busy": "2021-08-04T06:19:18.870727Z",
          "iopub.status.idle": "2021-08-04T06:19:18.914477Z",
          "shell.execute_reply": "2021-08-04T06:19:18.913488Z",
          "shell.execute_reply.started": "2021-08-04T06:19:18.871503Z"
        },
        "id": "WdejoJrlc-tc",
        "trusted": true
      }
    },
    {
      "cell_type": "code",
      "source": [
        "padded_doc[:5]"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:19:18.916423Z",
          "iopub.status.busy": "2021-08-04T06:19:18.916052Z",
          "iopub.status.idle": "2021-08-04T06:19:18.923234Z",
          "shell.execute_reply": "2021-08-04T06:19:18.922071Z",
          "shell.execute_reply.started": "2021-08-04T06:19:18.916384Z"
        },
        "id": "gDgTCS2KdI2p",
        "outputId": "c6c55783-3ea8-4160-ce93-85f21be51a42",
        "trusted": true
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Shape of padded docs = \",padded_doc.shape)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:19:18.925308Z",
          "iopub.status.busy": "2021-08-04T06:19:18.924912Z",
          "iopub.status.idle": "2021-08-04T06:19:18.934593Z",
          "shell.execute_reply": "2021-08-04T06:19:18.932496Z",
          "shell.execute_reply.started": "2021-08-04T06:19:18.925268Z"
        },
        "id": "3eaSIDi0dNf1",
        "outputId": "16d34a62-fbba-4f8a-99aa-30dda9478901",
        "trusted": true
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#tokenizer with filter changed\n",
        "output_tokenizer = create_tokenizer(unique_intent, filters = '!\"#$%&()*+,-/:;<=>?@[\\]^`{|}~')\n"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:19:18.942829Z",
          "iopub.status.busy": "2021-08-04T06:19:18.942515Z",
          "iopub.status.idle": "2021-08-04T06:19:18.947481Z",
          "shell.execute_reply": "2021-08-04T06:19:18.946478Z",
          "shell.execute_reply.started": "2021-08-04T06:19:18.9428Z"
        },
        "id": "X0rXzenSpgFR",
        "trusted": true
      }
    },
    {
      "cell_type": "code",
      "source": [
        "output_tokenizer.word_index"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:19:18.949393Z",
          "iopub.status.busy": "2021-08-04T06:19:18.948958Z",
          "iopub.status.idle": "2021-08-04T06:19:18.960129Z",
          "shell.execute_reply": "2021-08-04T06:19:18.959106Z",
          "shell.execute_reply.started": "2021-08-04T06:19:18.949341Z"
        },
        "id": "yNHQtkszskxr",
        "outputId": "6f863925-b6dc-4804-fbcb-cfdc166d26f4",
        "trusted": true
      }
    },
    {
      "cell_type": "code",
      "source": [
        "encoded_output = encoding_doc(output_tokenizer, intent)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:19:18.963057Z",
          "iopub.status.busy": "2021-08-04T06:19:18.96242Z",
          "iopub.status.idle": "2021-08-04T06:19:19.002002Z",
          "shell.execute_reply": "2021-08-04T06:19:19.001139Z",
          "shell.execute_reply.started": "2021-08-04T06:19:18.963016Z"
        },
        "id": "7OOx9qdBto1-",
        "trusted": true
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x=[]\n",
        "for i in encoded_output:\n",
        "    x.append(i[0])\n",
        "encoded_output=x"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:19:19.003815Z",
          "iopub.status.busy": "2021-08-04T06:19:19.003434Z",
          "iopub.status.idle": "2021-08-04T06:19:19.010417Z",
          "shell.execute_reply": "2021-08-04T06:19:19.009232Z",
          "shell.execute_reply.started": "2021-08-04T06:19:19.003776Z"
        },
        "trusted": true
      }
    },
    {
      "cell_type": "code",
      "source": [
        "encoded_output = np.array(encoded_output).reshape(len(encoded_output), 1)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:19:19.012607Z",
          "iopub.status.busy": "2021-08-04T06:19:19.012053Z",
          "iopub.status.idle": "2021-08-04T06:19:19.020754Z",
          "shell.execute_reply": "2021-08-04T06:19:19.019612Z",
          "shell.execute_reply.started": "2021-08-04T06:19:19.012562Z"
        },
        "id": "0_5Lv5PiyG-z",
        "trusted": true
      }
    },
    {
      "cell_type": "code",
      "source": [
        "encoded_output"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:19:19.022967Z",
          "iopub.status.busy": "2021-08-04T06:19:19.022479Z",
          "iopub.status.idle": "2021-08-04T06:19:19.031635Z",
          "shell.execute_reply": "2021-08-04T06:19:19.030472Z",
          "shell.execute_reply.started": "2021-08-04T06:19:19.022923Z"
        },
        "id": "dpM86WrVQlx5",
        "outputId": "abe3bd90-30fb-4e87-ffeb-0638329862bf",
        "trusted": true
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def one_hot(encode):\n",
        "  o = OneHotEncoder(sparse = False)\n",
        "  return(o.fit_transform(encode))"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:19:19.501574Z",
          "iopub.status.busy": "2021-08-04T06:19:19.501109Z",
          "iopub.status.idle": "2021-08-04T06:19:19.507566Z",
          "shell.execute_reply": "2021-08-04T06:19:19.506495Z",
          "shell.execute_reply.started": "2021-08-04T06:19:19.501527Z"
        },
        "id": "rD3QN-RPzfet",
        "trusted": true
      }
    },
    {
      "cell_type": "code",
      "source": [
        "output_one_hot = one_hot(encoded_output)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:19:19.510307Z",
          "iopub.status.busy": "2021-08-04T06:19:19.509661Z",
          "iopub.status.idle": "2021-08-04T06:19:19.518615Z",
          "shell.execute_reply": "2021-08-04T06:19:19.517489Z",
          "shell.execute_reply.started": "2021-08-04T06:19:19.510265Z"
        },
        "trusted": true
      }
    },
    {
      "cell_type": "code",
      "source": [
        "output_one_hot"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:19:19.521765Z",
          "iopub.status.busy": "2021-08-04T06:19:19.52125Z",
          "iopub.status.idle": "2021-08-04T06:19:19.532164Z",
          "shell.execute_reply": "2021-08-04T06:19:19.530424Z",
          "shell.execute_reply.started": "2021-08-04T06:19:19.521724Z"
        },
        "id": "A6HVslLTHgOM",
        "outputId": "854f508c-65ca-4af7-95d5-65c21815e7f3",
        "trusted": true
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:19:19.533974Z",
          "iopub.status.busy": "2021-08-04T06:19:19.533637Z",
          "iopub.status.idle": "2021-08-04T06:19:19.542526Z",
          "shell.execute_reply": "2021-08-04T06:19:19.54154Z",
          "shell.execute_reply.started": "2021-08-04T06:19:19.533942Z"
        },
        "id": "EqABUESD7xi9",
        "trusted": true
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_X, val_X, train_Y, val_Y = train_test_split(padded_doc, output_one_hot, shuffle = True, test_size = 0.2)\n"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:19:19.546114Z",
          "iopub.status.busy": "2021-08-04T06:19:19.545813Z",
          "iopub.status.idle": "2021-08-04T06:19:19.556608Z",
          "shell.execute_reply": "2021-08-04T06:19:19.55548Z",
          "shell.execute_reply.started": "2021-08-04T06:19:19.546077Z"
        },
        "id": "h8P4HTz6A4E-",
        "trusted": true
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Shape of train_X = %s and train_Y = %s\" % (train_X.shape, train_Y.shape))\n",
        "print(\"Shape of val_X = %s and val_Y = %s\" % (val_X.shape, val_Y.shape))"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:19:19.558124Z",
          "iopub.status.busy": "2021-08-04T06:19:19.557849Z",
          "iopub.status.idle": "2021-08-04T06:19:19.568267Z",
          "shell.execute_reply": "2021-08-04T06:19:19.567034Z",
          "shell.execute_reply.started": "2021-08-04T06:19:19.558097Z"
        },
        "id": "7E0uhC2OCtTx",
        "outputId": "a729758e-b4ed-41e9-b717-2a00630e530c",
        "trusted": true
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras import layers\n",
        "import tensorflow as tf\n",
        "\n",
        "max_features = 4650\n",
        "embedding_dim = 128\n",
        "sequence_length = 500\n",
        "# A integer input for vocab indices.\n",
        "inputs = tf.keras.Input(shape=(None,), dtype=\"int64\")\n",
        "\n",
        "# Next, we add a layer to map those vocab indices into a space of dimensionality\n",
        "# 'embedding_dim'.\n",
        "x = layers.Embedding(max_features, embedding_dim)(inputs)\n",
        "x = layers.Dropout(0.5)(x)\n",
        "\n",
        "# Conv1D + global max pooling\n",
        "x = layers.Conv1D(128, 6, padding=\"valid\", activation=\"relu\", strides=3)(x)\n",
        "x = layers.Conv1D(128, 6, padding=\"valid\", activation=\"relu\", strides=3)(x)\n",
        "x = layers.GlobalMaxPooling1D()(x)\n",
        "\n",
        "# We add a vanilla hidden layer:\n",
        "x = layers.Dense(128, activation=\"relu\")(x)\n",
        "x = layers.Dropout(0.5)(x)\n",
        "\n",
        "# We project onto a single unit output layer, and squash it with a sigmoid:\n",
        "predictions = layers.Dense(39, activation=\"sigmoid\", name=\"predictions\")(x)\n",
        "\n",
        "model = tf.keras.Model(inputs, predictions)\n",
        "\n",
        "# Compile the model with binary crossentropy loss and an adam optimizer.\n",
        "model.compile(loss=\"binary_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:19:19.800935Z",
          "iopub.status.busy": "2021-08-04T06:19:19.800498Z",
          "iopub.status.idle": "2021-08-04T06:19:19.876087Z",
          "shell.execute_reply": "2021-08-04T06:19:19.875242Z",
          "shell.execute_reply.started": "2021-08-04T06:19:19.800893Z"
        },
        "trusted": true
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#model = create_model(vocab_size, max_length)\n",
        "import tensorflow\n",
        "opt=tensorflow.keras.optimizers.Adam(learning_rate=1e-5)\n",
        "model.compile(loss = \"categorical_crossentropy\", optimizer = opt, metrics = [\"accuracy\"])\n",
        "model.summary()"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:20:17.929626Z",
          "iopub.status.busy": "2021-08-04T06:20:17.929195Z",
          "iopub.status.idle": "2021-08-04T06:20:17.961109Z",
          "shell.execute_reply": "2021-08-04T06:20:17.960228Z",
          "shell.execute_reply.started": "2021-08-04T06:20:17.92958Z"
        },
        "id": "f-NvE0P7MFCe",
        "outputId": "c8b7340d-de64-47af-bb92-c4c949165fba",
        "trusted": true
      }
    },
    {
      "cell_type": "code",
      "source": [
        "filename = 'intent.h5'\n",
        "checkpoint = ModelCheckpoint(filename, monitor='val_loss', verbose=1, save_best_only=True, mode='min')\n",
        "\n",
        "hist = model.fit(train_X, train_Y, epochs = 100, batch_size = 32, validation_data = (val_X, val_Y), callbacks = [checkpoint])"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:20:20.507467Z",
          "iopub.status.busy": "2021-08-04T06:20:20.507136Z",
          "iopub.status.idle": "2021-08-04T06:22:41.018576Z",
          "shell.execute_reply": "2021-08-04T06:22:41.017621Z",
          "shell.execute_reply.started": "2021-08-04T06:20:20.507434Z"
        },
        "id": "_r-dxm2sMQ-d",
        "outputId": "ca160dd3-e9af-4e73-caea-f1b6bd93e205",
        "trusted": true
      }
    },
    {
      "cell_type": "code",
      "source": [
        " model = load_model(\"intent.h5\")"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:33:52.35566Z",
          "iopub.status.busy": "2021-08-04T06:33:52.355288Z",
          "iopub.status.idle": "2021-08-04T06:33:52.484653Z",
          "shell.execute_reply": "2021-08-04T06:33:52.483782Z",
          "shell.execute_reply.started": "2021-08-04T06:33:52.355628Z"
        },
        "id": "YjXKos8ocXvw",
        "trusted": true
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def predictions(text):\n",
        "  clean = re.sub(r'[^ a-z A-Z 0-9]', \" \", text)\n",
        "  test_word = word_tokenize(clean)\n",
        "  test_word = [w.lower() for w in test_word]\n",
        "  test_ls = word_tokenizer.texts_to_sequences(test_word)\n",
        "  print(test_word)\n",
        "  #Check for unknown words\n",
        "  if [] in test_ls:\n",
        "    test_ls = list(filter(None, test_ls))\n",
        "    \n",
        "  test_ls = np.array(test_ls).reshape(1, len(test_ls))\n",
        " \n",
        "  x = padding_doc(test_ls, max_length)\n",
        "  \n",
        "  pred = model.predict(x)\n",
        "  \n",
        "  \n",
        "  return pred\n",
        "\n",
        "\n",
        "  "
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:34:01.485942Z",
          "iopub.status.busy": "2021-08-04T06:34:01.485533Z",
          "iopub.status.idle": "2021-08-04T06:34:01.492446Z",
          "shell.execute_reply": "2021-08-04T06:34:01.491212Z",
          "shell.execute_reply.started": "2021-08-04T06:34:01.485909Z"
        },
        "id": "qSTEzrlzcuya",
        "trusted": true
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def get_final_output(pred, classes):\n",
        "  predictions = pred[0]\n",
        " \n",
        "  classes = np.array(classes)\n",
        "  ids = np.argsort(-predictions)\n",
        "  classes = classes[ids]\n",
        "  predictions = -np.sort(-predictions)\n",
        " \n",
        "  for i in range(pred.shape[1]):\n",
        "    print(\"%s has confidence = %s\" % (classes[i], (predictions[i])))\n",
        "\n"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:34:05.749115Z",
          "iopub.status.busy": "2021-08-04T06:34:05.748787Z",
          "iopub.status.idle": "2021-08-04T06:34:05.754447Z",
          "shell.execute_reply": "2021-08-04T06:34:05.75359Z",
          "shell.execute_reply.started": "2021-08-04T06:34:05.749087Z"
        },
        "id": "P1ddofshmdzK",
        "trusted": true
      }
    },
    {
      "cell_type": "code",
      "source": [
        "text = \"how do you say Iron Man in Chinese\"\n",
        "pred = predictions(text)\n",
        "get_final_output(pred, unique_intent)"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2021-08-04T06:36:15.016734Z",
          "iopub.status.busy": "2021-08-04T06:36:15.016385Z",
          "iopub.status.idle": "2021-08-04T06:36:15.069838Z",
          "shell.execute_reply": "2021-08-04T06:36:15.068986Z",
          "shell.execute_reply.started": "2021-08-04T06:36:15.016676Z"
        },
        "id": "23VpGuihMdEU",
        "outputId": "407658b9-f870-47d3-bca6-abe69003aae4",
        "trusted": true
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pred"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-08-04T06:19:50.36811Z",
          "iopub.status.idle": "2021-08-04T06:19:50.368748Z"
        },
        "id": "bKUBDT36IHKO",
        "trusted": true
      }
    }
  ],
  "metadata": {
    "kernel_info": {
      "name": "python3"
    },
    "kernelspec": {
      "display_name": "azureml_py38",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.5 (default, Sep  4 2020, 07:30:14) \n[GCC 7.3.0]"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    },
    "vscode": {
      "interpreter": {
        "hash": "6d65a8c07f5b6469e0fc613f182488c0dccce05038bbda39e5ac9075c0454d11"
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 4
}